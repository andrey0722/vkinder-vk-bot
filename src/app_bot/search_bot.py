from random import randrange, randint
import vk_api
from vk_api.longpoll import VkLongPoll, VkEventType
from app_bot.config import config
from logs.logger_config import setup_logger
import json


class Search_BOT:

    def __init__(self) -> None:

        self.logger = setup_logger("vk_bot")
        self.logger.info("=== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ===")
        try:
            self.group_token = config.VK_TOKEN_GROUP
            self.vk = vk_api.VkApi(token=self.group_token)
            self.longpoll = VkLongPoll(self.vk)
            self.bot_name = config.BOT_NAME

            # –¢–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.user_token = config.VK_TOKEN_USER
            self.vk_user = vk_api.VkApi(token=self.user_token)

            self.logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        except Exception as e:
            self.logger.critical(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}", exc_info=True)
            raise

    def send_start_keyboard(self, user_id):
        self.logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        try:
            keyboard = {
                "one_time": False,
                "buttons": [
                    [
                        {
                            "action": {
                                "type": "text",
                                "label": "üîç –ü–æ–∏—Å–∫",
                            },
                            "color": "primary",
                        },
                        {
                            "action": {
                                "type": "text",
                                "label": "üë§ –ü—Ä–æ—Ñ–∏–ª—å",
                            },
                            "color": "secondary",
                        },
                    ],
                    [
                        {
                            "action": {
                                "type": "text",
                                "label": "‚ùì –ü–æ–º–æ—â—å",
                            },
                            "color": "secondary",
                        },
                    ],
                ],
            }

            self.vk.method(
                "messages.send",
                {
                    "user_id": user_id,
                    "message": "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    "keyboard": json.dumps(keyboard),
                    "random_id": randrange(10**7),
                },
            )

            self.logger.info(f"–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é user_id {user_id}")
        except vk_api.exceptions.ApiError as e:
            self.logger.error(
                f"–û—à–∏–±–∫–∞ VK API –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é user_id={user_id}: {e}",
                exc_info=True,
            )
        except Exception as e:
            self.logger.error(
                f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ send_start_keyboard: {e}", exc_info=True
            )
    def keyboard_dating(self, user_id):
        self.logger.info('–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∑–Ω–∞–∫–æ–º—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')
        try:
            keyboard = {
                "one_time": False,
                "buttons": [
                    [
                        {
                            "action": {
                                "type": "text",
                                "label": "‚è≠Ô∏è –°–ª–µ–¥—É—é—â–∞—è –∞–Ω–∫–µ—Ç–∞",
                            },
                            "color": "primary",
                        },
                        {
                            "action": {
                                "type": "text",
                                "label": "üíò –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
                            },
                            "color": "secondary",
                        },
                    ],
                    [
                        {
                            "action": {
                                "type": "text",
                                "label": "‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                            },
                            "color": "secondary",
                        },
                    ],
                ],
            }

            self.vk.method(
                "messages.send",
                {
                    "user_id": user_id,
                    "message": "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    "keyboard": json.dumps(keyboard),
                    "random_id": randrange(10**7),
                },
            )

            self.logger.info(f"–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é user_id {user_id}")
        except vk_api.exceptions.ApiError as e:
            self.logger.error(
                f"–û—à–∏–±–∫–∞ VK API –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é user_id={user_id}: {e}",
                exc_info=True,
            )
        except Exception as e:
            self.logger.error(
                f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ send_start_keyboard: {e}", exc_info=True
            )

    def send_message(self, user_id, message):
        try:
            self.vk.method(
                "messages.send",
                {
                    "user_id": user_id,
                    "random_id": randrange(10**7),
                    "message": message,
                },
            )
            self.logger.info(f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID:{user_id}')
        except vk_api.exceptions.VkApiError as e:
            self.logger.error(f'–û—à–∏–±–∫–∞ VK API: {e}', exc_info=True)
        except Exception as e:
            self.logger.error(f'–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–±–∏–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏:\n{e}', exc_info=True)

    def format_user_profile(self, user_id, your_profile=False):

        if not your_profile:
            user = self.search_user_by_parameters(user_id)
        else:
            user = self.get_user_data(user_id)

        if not user:
            if your_profile:
                return "üòî –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è."
            else:
                return "üòî –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!"



        sex_map = {1: '–ñ–µ–Ω—Å–∫–∏–π', 2: '–ú—É–∂—Å–∫–æ–π'}
        sex = sex_map.get(user.get('sex', 0), '–ù–µ —É–∫–∞–∑–∞–Ω')  
        city_name = user.get('city', {}).get('title', '–ù–µ —É–∫–∞–∑–∞–Ω')
        
        start_message = '–ê–Ω–µ–∫—Ç–∞ –ø–æ–ª—å–∑–≤–∞—Ç–µ–ª—è: ' if not your_profile else '–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞: '
        message = f"""
                    {start_message}
                        –ò–º—è : {user['first_name']}
                        –§–∞–º–∏–ª–∏—è: {user['last_name']}
                        –ü–æ–ª: {sex},
                        –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {user.get('bdate', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}
                        –ì–æ—Ä–æ–¥: {city_name}
            """
        return message

    def search_user_by_parameters(self, user_id):
        current_user = self.get_user_data(user_id)

        if not current_user:
            self.logger.warning(f'–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–¥ id{user_id}')
            return []

        random_offset = randint(0, 999)

        user_sex = current_user.get('sex', 0)
        if user_sex == 0:
            self.logger.debug(f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª, –ø–æ–∏—Å–∫ –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è')
            return None

        sex = 1 if user_sex == 2 else 2
        users = self.vk_user.method(
            "users.search",
            {
                "count": 1,
                'offset' : random_offset,
                "has_photo": 1,
                "online": 1,
                "sex": sex,
                'fields' : 'sex, city, bdate',
                
            },
        )

        if user := users.get('items', []):
            return user[0]
        else:
            self.logger.warning('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –ø–æ–∏—Å–∫–∞')
            return None

    def get_user_data(self, user_id):
        try:
            user_parameters = self.vk.method(
                "users.get",
                {
                    "user_ids": user_id,
                    "fields": "first_name, last_name, sex, bdate ,city",
                },
            )
            if not user_parameters:
                self.logger.debug(
                    f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id={user_id} –∏–∑–≤–ª–µ—á—å –Ω–µ —É–¥–∞–ª–æ—Å—å"
                )
                return None

            self.logger.info(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è user_id={user_id} –ø–æ–ª—É—á–µ–Ω—ã")
            return user_parameters[0]
        except vk_api.exceptions.VkApiError as e:
            self.logger.error(
                f"–û—à–∏–±–∫–∞ VK API –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è={user_id}: {e}",
                exc_info=True,
            )
            return None

    def handle_message(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        user_id = event.user_id
        text = event.text.lower().strip()

        self.logger.info(f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç user_id={user_id}: "{text}"')
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
        try:
            if text in ["–Ω–∞—á–∞—Ç—å", "–ø—Ä–∏–≤–µ—Ç", "start"]:
                self.send_start_keyboard(user_id)

            elif text == "üîç –ø–æ–∏—Å–∫":
                self.send_message(user_id, self.format_user_profile(user_id, False))
                self.keyboard_dating(user_id)
            
            elif text == "‚è≠Ô∏è —Å–ª–µ–¥—É—é—â–∞—è –∞–Ω–∫–µ—Ç–∞":
                self.send_message(user_id, self.format_user_profile(user_id, False))

            elif text == "‚óÄÔ∏è –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
                self.send_start_keyboard(user_id)

            elif text == "üë§ –ø—Ä–æ—Ñ–∏–ª—å":
                self.send_message(user_id, self.format_user_profile(user_id, True))

            elif text == "‚ùì –ø–æ–º–æ—â—å":
                help_text = """
                –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
                üîç –ü–æ–∏—Å–∫ - –ø–æ–∏—Å–∫ –∞–Ω–∫–µ—Ç
                üë§ –ü—Ä–æ—Ñ–∏–ª—å - —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞
                ‚ùì –ü–æ–º–æ—â—å - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                """
                self.send_message(user_id, help_text.strip())
                self.send_start_keyboard(user_id)

            else:
                self.send_message(user_id, "–ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –ù–∞–∂–º–∏ '‚ùì –ü–æ–º–æ—â—å'")
        except Exception as e:
            self.logger.error(
                f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥ user_id:{user_id}: {e}",
                exc_info=True,
            )

    def start(self):
        try:
            for event in self.longpoll.listen():
                if event.type == VkEventType.MESSAGE_NEW and event.to_me:
                    self.handle_message(event)
        except KeyboardInterrupt:
            print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
